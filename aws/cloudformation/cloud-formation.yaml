AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  MyKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "EC2 key pair"
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large]
    ConstraintDescription: Please choose a valid instance type.

  #InfluxDbVolume:
  #  Description: EBS volume for InfluxDb data
  #  Type: AWS::EC2::Volume::Id
  #  ConstraintDescription: Please choose a valid EBS volume for InfluxDb data

  VPC:
    Description: The VPC used for creating the resources
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Please choose a valid VPC

  PublicSubnetOne:
    Description: First subnet attached in VPC in AZ
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: Please choose a valid Subnet

  PublicSubnetTwo:
    Description: Second subnet attached in VPC in AZ
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: Please choose a valid Subnet
  
  EfsDnsName:
    Type: String
    ConstraintDescription: Please choose a valid EFS DNS name

  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of EC2 instances to launch in your ECS cluster.
  
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.

#Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are two subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  #SubnetConfig:
  #  VPC:
  #    CIDR: '10.0.0.0/16'
  #  PublicOne:
  #    CIDR: '10.0.0.0/24'
  #  PublicTwo:
  #    CIDR: '10.0.1.0/24'
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  #VPC:
  #  Type: AWS::EC2::VPC
  #  Properties:
  #    EnableDnsSupport: true
  #    EnableDnsHostnames: true
  #    CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  # Two public subnets, where containers can have public IP addresses
  #PublicSubnetOne:
  #  Type: AWS::EC2::Subnet
  #  Properties:
  #    AvailabilityZone:
  #       Fn::Select:
  #       - 0
  #       - Fn::GetAZs: {Ref: 'AWS::Region'}
  #    VpcId: !Ref 'VPC'
  #    CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
  #    MapPublicIpOnLaunch: true
  #PublicSubnetTwo:
  #  Type: AWS::EC2::Subnet
  #  Properties:
  #    AvailabilityZone:
  #       Fn::Select:
  #       - 1
  #       - Fn::GetAZs: {Ref: 'AWS::Region'}
  #    VpcId: !Ref 'VPC'
  #    CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
  #    MapPublicIpOnLaunch: true

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

# Elasticache Redis cluster

  ElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Cache Subnet Group
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  ElasticacheCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      ClusterName: 'elasticache-influxdb'
      AutoMinorVersionUpgrade: 'true'
      Engine: redis
      EngineVersion: '5.0.6'
      Port: 6379
      CacheParameterGroupName: 'default.redis5.0'
      CacheNodeType: cache.t2.micro
      NumCacheNodes: '1'
      CacheSubnetGroupName: !Ref ElasticacheSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt EcsHostSecurityGroup.GroupId

# Marker Security Group to allow the EC2 instances to connect to EFS
  EFSClientSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'EFS Mount target client' 
      VpcId: !Ref VPC
  #EC2Instance:
  #  Type: AWS::EC2::Instance
  #  Properties:
  #    ImageId: ami-01933d3dbcb8f63e0
  #    KeyName: !Ref MyKey
  #    SecurityGroupIds: [!Ref EcsHostSecurityGroup]
  #    InstanceType: !Ref InstanceType
  #    IamInstanceProfile: !Ref EC2InstanceProfile
  #    SubnetId: !Ref PublicSubnetOne
  #    UserData:
  #      Fn::Base64: !Sub |
  #        #!/bin/bash -xe
  #        echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
  #        yum install -y aws-cfn-bootstrap
  #        mkdir /mnt/Influxdb-volume
  #        mount /dev/xvdf /mnt/Influxdb-volume
  #        /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region}
  #  DependsOn:
  #    - InfluxDbVolumeAttach
#
  #InfluxDbVolumeAttach:
  #  Type: AWS::EC2::VolumeAttachment
  #  Properties:
  #    Device: /dev/xvdf
  #    InstanceId: !Ref EC2Instance
  #    VolumeId: !Ref InfluxDbVolume

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: air-monitoring-autocreated

  # A security group for the EC2 hosts that will run the containers.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other hosts in the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other hosts in the same security group
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'EcsHostSecurityGroup'
  EcsSecurityGroupIngressFromWorld:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from public internet
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      LoadBalancerNames: [!Ref PublicLoadBalancer]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-01933d3dbcb8f63e0
      KeyName: !Ref MyKey
      SecurityGroups: 
        - !Ref 'EcsHostSecurityGroup'
        - !Ref 'EFSClientSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          sudo yum install -y aws-cfn-bootstrap nc nfs-utils
          while ! nc -z ${EfsDnsName} 2049;
          do sleep 10; done
          sleep 10
          sudo mkdir /mnt/sdcc-airmonitoring-data
          sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${EfsDnsName}:/ /mnt/sdcc-airmonitoring-data
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'

  # Load balancers for getting traffic to containers.
  # This sample template creates one load balancer:
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - GatewayAttachement
    Properties:
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
      Scheme: internet-facing
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: 'TCP:22'
        Timeout: '5'
        UnhealthyThreshold: '2'  
      Listeners: 
        # SSH
        - LoadBalancerPort: 22
          Protocol: TCP
          InstancePort: 22
          InstanceProtocol: TCP
        # Elasticache public proxy
        - LoadBalancerPort: 3456
          Protocol: TCP
          InstancePort: 3456
          InstanceProtocol: TCP
        # Chronograf Dashboard
        - LoadBalancerPort: 8888
          Protocol: HTTP
          InstancePort: 8888
          InstanceProtocol: HTTP
        # InfluxAPI Rest
        - LoadBalancerPort: 8086
          Protocol: HTTP
          InstancePort: 8086
          InstanceProtocol: HTTP
        # Flink Dashboard
        - LoadBalancerPort: 8081
          Protocol: HTTP
          InstancePort: 8081
          InstanceProtocol: HTTP

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  EcsHostSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref 'EcsHostSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EcsHostSecurityGroup' ] ]